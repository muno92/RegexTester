@page "/"
@using System.Text.RegularExpressions

<div class="container">
    <h1>Regex Tester</h1>
    <div class="row">
        <div class="col-sm">
            <div class="row">
                <label for="pattern">Pattern</label>
                <input type="text" name="pattern" id="pattern" @bind="_pattern">
            </div>
            <div class="row">
                <label for="input">Input</label>
                <textarea name="input" id="input" cols="60" rows="20" @bind="_input"></textarea>
            </div>
            <div class="row">
                <button class="btn btn-primary" @onclick="Run">Run</button>
            </div>
        </div>
        <section class="col-sm">
            <h2><a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regexoptions?view=net-5.0" target="_blank">Options</a></h2>
            <ul class="list-group">
                @foreach (var field in typeof(RegexOptions).GetFields())
                {
                    @if (new[] {"value__", RegexOptions.None.ToString(), RegexOptions.Compiled.ToString()}.Contains(field.Name))
                    {
                        continue;
                    }
                    <li class="list-group-item">
                        <label>
                            <input type="checkbox" name="option" value="@field.Name"
                                   @onchange="eventArgs => Check(field.Name, eventArgs)">
                            @field.Name
                        </label>
                    </li>
                }
            </ul>
        </section>
    </div>
    @if (_matches != null)
    {
        <h2>Matches</h2>
        <ul>
            @foreach (Match match in _matches)
            {
                <li><MatchWord Match="match"/></li>
            }
        </ul>
    }
</div>

@code {
    private string _pattern;

    private string _input;

    private MatchCollection _matches;

    private readonly HashSet<string> _enableOptions = new();

    private void Run()
    {
        var options = _enableOptions.Aggregate
            (
                RegexOptions.None,
                (current, enableOption) => current | (RegexOptions) Enum.Parse(typeof(RegexOptions), enableOption)
            );

        _matches = Regex.Matches(_input, _pattern, options);
    }

    private void Check(string checkedOption, ChangeEventArgs eventArgs)
    {
        if (eventArgs.Value != null && (bool) eventArgs.Value)
        {
            _enableOptions.Add(checkedOption);
            return;
        }
        //存在チェックは省略（仮に存在しなかったとしてもfalseが返るだけなため）
        _enableOptions.Remove(checkedOption);
    }

}
    
